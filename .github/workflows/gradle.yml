name: Neoinvo project CICD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # test:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Set executable permissions for gradlew
  #       run: chmod +x gradlew
  #     - name: Set up JDK 17
  #       uses: actions/setup-java@v4
  #       with:
  #         java-version: '17'
  #         distribution: 'temurin'
  #     - name: Run unit tests
  #       run: ./gradlew test
  #     - name: Generate JaCoCo test coverage report
  #       run: ./gradlew jacocoTestReport
  #     - name: Upload JaCoCo HTML report
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: jacoco-report
  #         path: build/reports/jacoco/test/html/index.html

  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: Set executable permissions for gradlew
        run: chmod +x gradlew
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
      - name: Build with Gradle Wrapper
        run: ./gradlew clean build -x test

      # Build & push Docker images for api-gateway
      - name: Build & push API Gateway Docker image
        uses: mr-smithers-excellent/docker-build-push@v6
        with:
          image: lyes97/neoinvo-api-gateway
          tags: latest
          registry: docker.io
          directory: .
          dockerfile: api-gateway/Dockerfile
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build & push Docker images for service-auth
      - name: Build & push Auth Service Docker image
        uses: mr-smithers-excellent/docker-build-push@v6
        with:
          image: lyes97/neoinvo-service-auth
          tags: latest
          registry: docker.io
          directory: .
          dockerfile: service-auth/Dockerfile
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

  dependency-submission:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Generate and submit dependency graph
        uses: gradle/actions/dependency-submission@v4

  deploy:
    runs-on: ubuntu-latest
    needs: [ build, dependency-submission ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env file from secrets
        run: |
          cat << EOF > .env
          SPRING_DATASOURCE_URL=${{ secrets.SPRING_DATASOURCE_URL }}
          SPRING_DATASOURCE_USERNAME=${{ secrets.SPRING_DATASOURCE_USERNAME }}
          SPRING_DATASOURCE_PASSWORD=${{ secrets.SPRING_DATASOURCE_PASSWORD }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          JWT_EXPIRATION_MS=${{ secrets.JWT_EXPIRATION_MS }}
          MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}
          MYSQL_USER=${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
          MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
          EOF

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy using Docker Compose on VPS
        run: |
          ssh -o StrictHostKeyChecking=no lyes@195.35.24.85 << EOF
            # Pull latest Docker images
            docker pull lyes97/neoinvo-api-gateway:latest
            docker pull lyes97/neoinvo-service-auth:latest
            docker pull mysql:8.3

            # Create or clean deployment folder
            mkdir -p ~/neoinvo-deploy
          EOF

      - name: Copy deployment files to VPS
        run: |
          scp docker-compose.yml .env lyes@195.35.24.85:~/neoinvo-deploy/

      - name: Launch Docker Compose remotely
        run: |
          ssh -o StrictHostKeyChecking=no lyes@195.35.24.85 << EOF
            set -e
            cd ~/neoinvo-deploy

            echo "=== Vérification du .env ==="
            cat .env

            echo "Arrêt des conteneurs existants..."
            docker-compose down || true

            echo "Lancement de mysql-auth..."
            docker-compose --env-file .env up -d mysql-auth

            echo "⏳ Attente que MySQL soit prêt..."
            timeout 300 bash -c 'until docker exec neoinvo-deploy_mysql-auth_1 mysqladmin ping -uroot -p$MYSQL_ROOT_PASSWORD --silent; do
              echo "Waiting for MySQL to be healthy..."
              sleep 5
            done' || (echo "MySQL failed to start"; exit 1)

            echo "✅ MySQL prêt. Lancement des autres services..."
            docker-compose --env-file .env up -d api-gateway service-auth
          EOF
